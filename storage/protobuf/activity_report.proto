syntax = "proto3";

package activity_report;

option go_package = "cere.network/ddc-storage-node/pkg/grpc/api/activity_report";

import "storage/protobuf/auth_token.proto";
import "storage/protobuf/signature.proto";

message ActivityRecord {
  ActivityFulfillment upstream = 1;
  repeated ActivityFulfillment downstream = 2;
  uint64 timestamp = 3;
  common.Signature signature = 4;
}

message ActivityRequest {
  optional ActivityRequest parentRequest = 1;
  string requestId = 2;

  enum RequestType {
    REQUEST_TYPE_PUT = 0;
    REQUEST_TYPE_GET = 1;
    REQUEST_TYPE_DELETE = 2;
  }

  enum ContentType {
    CONTENT_TYPE_PIECE = 0;
    CONTENT_TYPE_SEGMENT = 1;
    CONTENT_TYPE_MERKLE_TREE = 2;
    CONTENT_TYPE_METADATA = 3;
  }

  RequestType requestType = 3;
  ContentType contentType = 4;
  uint64 bucketId = 5 [jstype = JS_NORMAL]; // set only when content type is PIECE
  bytes id = 6; // either cid or segment id or merkle tree root hash

  uint64 offset = 7; // offset of data requested (set only when RecordType = GET)
  uint64 size = 8; // size of content stored or delivered

  uint64 timestamp = 9;
  common.Signature signature = 10;

  optional common.AuthToken authToken = 11; // set only in root request that is sent by client who has a delegated access (in case owner makes a request, the signature is enough to authorise him)
}

// we will get this on the server side streaming

message ActivityAcknowledgment {
  string requestId = 1;
  uint64 bytesStoredOrDelivered = 2;
  uint64 timestamp = 3;
  common.Signature signature = 4;
}

message ActivityResponse {
  Status status = 1;
  uint32 time = 2; // response time measured by client (start before the request sent and end after the response received)
  bytes peerID = 3;

  enum Status {
    UNKNOWN = 0;
    OK = 1;
    NOT_FOUND = 2; // server doesn't have requested resource (e.g. node could miss piece metadata)
    INTERNAL = 3; // error in a server response
    UNAVAILABLE = 4; // no response from server
    ABORTED = 5; // request aborted by a client (e.g. storage node asked for piece metadata a node, but after some time had to initialise parallel request to other node and one of the requests can be aborted once metadata received)
  }
}

message ActivityFulfillment {
  ActivityRequest request = 1;
  optional ActivityAcknowledgment ack = 2;
  optional ActivityResponse response = 3;
}
